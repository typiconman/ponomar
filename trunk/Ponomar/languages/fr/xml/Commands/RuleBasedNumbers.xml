<DATA>
<!-- This is the data that allows a user to define ideographic based numbers to replace the normal decimal-based numbers.
	It should NOT be used for numeric systems such as the Arabic, which use the same set of numbers but with different forms.
	The following are the basic rules and definitions:
	1) DF: This is a list (separated by /,), that defines how the new number is to be formed. Each entry can include the following symbols:
		a) # : The value of the multiplier, that is, the integer part of N / BaN[i] (where N is the number).
			 This multiplier will be converted to the appropriate ideographic value, by recursively calling the function.
		b) $ : This represents the remainder, that is, $ = the fractional part of N / BaN[i] (where N is the number).
		c) {'X',base} : This represents an element (X) that is repeated for every time N (where N is the number) exceeds the base BaN[i].
			This repeated value is deducted from the value of $, that is, $ = fpart(N / BaN[i]) - ipart((N - BaN[i]) / base)) * base.
		d) ['X','condition'] : This represents conditional characters that will only be displayed if the condition is true. This does not effect the value of $.
				The following characters can be used in the condition statement:
					a) $ : represents the remainder, and
					b) N : represents the current decimal value of the number.
				The conditional character can be the '#' character, as in some systems only under certain cases does the multiplier appear.
	2) BaN : This is a list (separated by /,), that defines the corresponding decimal version of the numbers that align with the values in DF.
		The order of this list must strictly be the same!
	3) Cz : This represents whether the zero numeral be converted if it appears, that is, should 1000 be written as
		a) [=true] 1tqqq (where q represent the zero in this system) or
		b) [=false] 1t . In general, this is the more common case.
	4) UB : This is the upper bound for the numbers that can be represented. Numbers larger then this are returned unformatted.
	5) IM : This is a list of ignorable characters (at present this is not defined).
	6) fformat : This represents how the final number should be formatted to clearly show that it is a numeral rather than a word.
			The basis of this format are the '###', between which can be placed conditions as follows:
				a) between the first two #, any conditions that need to be placed at a specified place starting from the start of the number.
					If the specified location is greater than the length of the (unformatted) number, then the character will be placed
					at the end of the given number.
					As well, this command tends to place the formatting *before* the given number.
				b) between the end two #, any conditions that need to be placed at a specified place starting from the end of a number.
					If the specified location is greater than the length of the (unformatted) number, then the character will be placed
					at the start of the given number.
					As well, this command tends to place the formatting *after* the given number.
			The following are permissible positional formatting rules:
				a) {'X','location'} : This represents the characters (X) that will always be placed at the given *location*, the location can
					also be the following variable:
						a) length(A) : This represents the length of the unformatted number.
				b) ['X','location','condition'] : This represents the characters (X) that will be placed at the given *location* only
					if *condition* evaluates to true. The following variables can be placed in condition:
						a) length(A) : This represents the length of the unformatted number.
						b) N : This represents the decimal value of the number.
					Location can take the same variables as for the definite ({}) case above (see a)).
			Any fixed values can be placed before or after the octothorps (#).
	7) zero : This represent how the value of zero should be represented in the given system.
	Two examples will be used to exaplain the system:
		For the number 70 and the format DF[5] = "L{'X',10}$" and BaN[5] = 50:
			a) Since this is the first case that is less than the given number, it will be used.
			b) N = 70; BaN[5] = 50; $ = fpart(70 / 50) = 20
			c) {}-brackets are found: base = 10, with the character 'X'; The number of repeats will be
				ipart((N - BaN[i]) / base) = ipart((70 - 50) / 10) = 2. Thus, 'X' will be repeated twice.
				The remainder will be given as $ = fpart(70 / 50) - 2*base = 0.
			d) Since Cz="false" and $ = 0, the procedure will stop and the unformatted number will be returned as "LXX" (which is correct).
			e) If $ <> 0, then above procedure would have been repeated by letting N = $.
		For the number 107 and the format DF[5] = "#百['〇','$ &lt; 10 &amp;&amp; $ > 0']['一','$ &gt;= 10 &amp;&amp; $ &lt; 20']$" and BaN[5] = 100,
			a) Since this is the first case that is less than the given number, it will be used.
			b) N = 107; BaN[5] = 100; $ = fprat(107 / 100) = 7.
			c) The are 2 conditional formatting issues:
				i) The first one has a condition that can be written as '$ &lt; 10 &amp;&amp; $ > 0' = '7 &lt; 10 &amp;&amp; 7 > 0',
					which evaluates to true. Thus, '〇' (an ideographic zero) will be added to the final unformatted number.
				ii) The second one has a condition that can be written as  '$ &gt;= 10 &amp;&amp; $ &lt; 20' = '7 &gt;= 10 &amp;&amp; 7 &lt; 20'
					which evaluates to false. Thus, '一' will not be added to the final unformatted number.
			d) # now needs to be converted to a ideographic form. In this case # = ipart(N / BaN) = ipart(107 / 100) = 1.
			e) Running the procedure will give that # = 1 will be converted to '一'.
			f) Thus, $ needs to be converted. Running the procedure will give that $ = 7 will be converted to '七'.
			g) Therefore, the unformatted number will be given as '一百〇七', which the author believes is correct.
		For both of these examples, fformat = "###" and the unformated number will be the same as the final formatted number.
		For a more complex case of final formatting rules, the Church Slavonic case will be considered, where
			fformat = ".##['҃','length(A) / 2 - 0.5','length(A) % 2 == 1']['҃','length(A) / 2','length(A) % 2 == 0 &amp;&amp; N &gt;= 20']['҃','length(A) / 2 - 1','length(A) % 2 == 0 &amp;&amp; N &lt; 20']#."
			To be continued.


Copyright 2010 Yuri Shardt, as part of the Ponomar Project. 
				
 -->
	
		
		 <PHRASE Key="DF" Value="I{'I',1}/,IV/,V{'I',1}/,IX/,X{'X',10}$/,XL$/,L{'X',10}$/,XC$/,C{'C',100}$/,CD$/,D{'C',100}$/,CM$/,M{'M',1000}$"/>
		<PHRASE Key="BaN" Value="1/,4/,5/,9/,10/,40/,50/,90/,100/,400/,500/,900/,1000"/>
		<PHRASE Key="Cz" Value="false"/>
		<PHRASE Key="UB" Value="4999"/>
		<PHRASE Key="IM" Value=""/>
		<PHRASE Key="fformat" Value="###"/>
		<PHRASE Key="zero" Value="zero"/>

    
</DATA>